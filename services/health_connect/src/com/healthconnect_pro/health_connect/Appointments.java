/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Appointments generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`appointments`")
public class Appointments implements Serializable {

    private Integer id;
    private Integer patientId;
    private Integer doctorId;
    private Date appointmentDate;
    private String dayOfWeek;
    private String appointmentStatus;
    private Integer slotId;
    private Timeslots timeslots;
    private Patients patients;
    private Doctors doctors;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`patient_id`", nullable = true, scale = 0, precision = 10)
    public Integer getPatientId() {
        return this.patientId;
    }

    public void setPatientId(Integer patientId) {
        this.patientId = patientId;
    }

    @Column(name = "`doctor_id`", nullable = true, scale = 0, precision = 10)
    public Integer getDoctorId() {
        return this.doctorId;
    }

    public void setDoctorId(Integer doctorId) {
        this.doctorId = doctorId;
    }

    @Column(name = "`appointment_date`", nullable = true)
    public Date getAppointmentDate() {
        return this.appointmentDate;
    }

    public void setAppointmentDate(Date appointmentDate) {
        this.appointmentDate = appointmentDate;
    }

    @Column(name = "`day_of_week`", nullable = true, length = 255)
    public String getDayOfWeek() {
        return this.dayOfWeek;
    }

    public void setDayOfWeek(String dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
    }

    @Column(name = "`appointment_status`", nullable = true, length = 255)
    public String getAppointmentStatus() {
        return this.appointmentStatus;
    }

    public void setAppointmentStatus(String appointmentStatus) {
        this.appointmentStatus = appointmentStatus;
    }

    @Column(name = "`slot_id`", nullable = true, scale = 0, precision = 10)
    public Integer getSlotId() {
        return this.slotId;
    }

    public void setSlotId(Integer slotId) {
        this.slotId = slotId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`slot_id`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_appointments_TO_Times4MiAv`"))
    @Fetch(FetchMode.JOIN)
    public Timeslots getTimeslots() {
        return this.timeslots;
    }

    public void setTimeslots(Timeslots timeslots) {
        if(timeslots != null) {
            this.slotId = timeslots.getId();
        }

        this.timeslots = timeslots;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`patient_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`appointments_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Patients getPatients() {
        return this.patients;
    }

    public void setPatients(Patients patients) {
        if(patients != null) {
            this.patientId = patients.getId();
        }

        this.patients = patients;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`doctor_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`appointments_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Doctors getDoctors() {
        return this.doctors;
    }

    public void setDoctors(Doctors doctors) {
        if(doctors != null) {
            this.doctorId = doctors.getId();
        }

        this.doctors = doctors;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Appointments)) return false;
        final Appointments appointments = (Appointments) o;
        return Objects.equals(getId(), appointments.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}