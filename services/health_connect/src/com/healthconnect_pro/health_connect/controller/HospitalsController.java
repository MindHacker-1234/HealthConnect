/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.healthconnect_pro.health_connect.Departments;
import com.healthconnect_pro.health_connect.Doctors;
import com.healthconnect_pro.health_connect.Hospitals;
import com.healthconnect_pro.health_connect.service.HospitalsService;


/**
 * Controller object for domain model class Hospitals.
 * @see Hospitals
 */
@RestController("health_connect.HospitalsController")
@Api(value = "HospitalsController", description = "Exposes APIs to work with Hospitals resource.")
@RequestMapping("/health_connect/Hospitals")
public class HospitalsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HospitalsController.class);

    @Autowired
	@Qualifier("health_connect.HospitalsService")
	private HospitalsService hospitalsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Hospitals instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hospitals createHospitals(@RequestBody Hospitals hospitals) {
		LOGGER.debug("Create Hospitals with information: {}" , hospitals);

		hospitals = hospitalsService.create(hospitals);
		LOGGER.debug("Created Hospitals with information: {}" , hospitals);

	    return hospitals;
	}

    @ApiOperation(value = "Returns the Hospitals instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hospitals getHospitals(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Hospitals with id: {}" , id);

        Hospitals foundHospitals = hospitalsService.getById(id);
        LOGGER.debug("Hospitals details with id: {}" , foundHospitals);

        return foundHospitals;
    }

    @ApiOperation(value = "Updates the Hospitals instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hospitals editHospitals(@PathVariable("id") Integer id, @RequestBody Hospitals hospitals) {
        LOGGER.debug("Editing Hospitals with id: {}" , hospitals.getId());

        hospitals.setId(id);
        hospitals = hospitalsService.update(hospitals);
        LOGGER.debug("Hospitals details with id: {}" , hospitals);

        return hospitals;
    }
    
    @ApiOperation(value = "Partially updates the Hospitals instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hospitals patchHospitals(@PathVariable("id") Integer id, @RequestBody @MapTo(Hospitals.class) Map<String, Object> hospitalsPatch) {
        LOGGER.debug("Partially updating Hospitals with id: {}" , id);

        Hospitals hospitals = hospitalsService.partialUpdate(id, hospitalsPatch);
        LOGGER.debug("Hospitals details after partial update: {}" , hospitals);

        return hospitals;
    }

    @ApiOperation(value = "Deletes the Hospitals instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteHospitals(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Hospitals with id: {}" , id);

        Hospitals deletedHospitals = hospitalsService.delete(id);

        return deletedHospitals != null;
    }

    /**
     * @deprecated Use {@link #findHospitals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Hospitals instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hospitals> searchHospitalsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Hospitals list by query filter:{}", (Object) queryFilters);
        return hospitalsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Hospitals instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hospitals> findHospitals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Hospitals list by filter:", query);
        return hospitalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Hospitals instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hospitals> filterHospitals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Hospitals list by filter", query);
        return hospitalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportHospitals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return hospitalsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportHospitalsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Hospitals.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> hospitalsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Hospitals instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countHospitals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Hospitals");
		return hospitalsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getHospitalsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return hospitalsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/departmentses")
    @ApiOperation(value = "Gets the departmentses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Departments> findAssociatedDepartmentses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated departmentses");
        return hospitalsService.findAssociatedDepartmentses(id, pageable);
    }

    @GetMapping(value="/{id:.+}/doctorses")
    @ApiOperation(value = "Gets the doctorses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Doctors> findAssociatedDoctorses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated doctorses");
        return hospitalsService.findAssociatedDoctorses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service HospitalsService instance
	 */
	protected void setHospitalsService(HospitalsService service) {
		this.hospitalsService = service;
	}

}