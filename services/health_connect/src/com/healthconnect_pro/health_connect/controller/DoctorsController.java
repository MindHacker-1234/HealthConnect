/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.healthconnect_pro.health_connect.Appointments;
import com.healthconnect_pro.health_connect.Doctors;
import com.healthconnect_pro.health_connect.service.DoctorsService;


/**
 * Controller object for domain model class Doctors.
 * @see Doctors
 */
@RestController("health_connect.DoctorsController")
@Api(value = "DoctorsController", description = "Exposes APIs to work with Doctors resource.")
@RequestMapping("/health_connect/Doctors")
public class DoctorsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoctorsController.class);

    @Autowired
	@Qualifier("health_connect.DoctorsService")
	private DoctorsService doctorsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Doctors instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Doctors createDoctors(@RequestBody Doctors doctors) {
		LOGGER.debug("Create Doctors with information: {}" , doctors);

		doctors = doctorsService.create(doctors);
		LOGGER.debug("Created Doctors with information: {}" , doctors);

	    return doctors;
	}

    @ApiOperation(value = "Returns the Doctors instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Doctors getDoctors(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Doctors with id: {}" , id);

        Doctors foundDoctors = doctorsService.getById(id);
        LOGGER.debug("Doctors details with id: {}" , foundDoctors);

        return foundDoctors;
    }

    @ApiOperation(value = "Updates the Doctors instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Doctors editDoctors(@PathVariable("id") Integer id, @RequestBody Doctors doctors) {
        LOGGER.debug("Editing Doctors with id: {}" , doctors.getId());

        doctors.setId(id);
        doctors = doctorsService.update(doctors);
        LOGGER.debug("Doctors details with id: {}" , doctors);

        return doctors;
    }
    
    @ApiOperation(value = "Partially updates the Doctors instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Doctors patchDoctors(@PathVariable("id") Integer id, @RequestBody @MapTo(Doctors.class) Map<String, Object> doctorsPatch) {
        LOGGER.debug("Partially updating Doctors with id: {}" , id);

        Doctors doctors = doctorsService.partialUpdate(id, doctorsPatch);
        LOGGER.debug("Doctors details after partial update: {}" , doctors);

        return doctors;
    }

    @ApiOperation(value = "Deletes the Doctors instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDoctors(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Doctors with id: {}" , id);

        Doctors deletedDoctors = doctorsService.delete(id);

        return deletedDoctors != null;
    }

    /**
     * @deprecated Use {@link #findDoctors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Doctors instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Doctors> searchDoctorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Doctors list by query filter:{}", (Object) queryFilters);
        return doctorsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Doctors instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Doctors> findDoctors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Doctors list by filter:", query);
        return doctorsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Doctors instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Doctors> filterDoctors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Doctors list by filter", query);
        return doctorsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDoctors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return doctorsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDoctorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Doctors.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> doctorsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Doctors instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDoctors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Doctors");
		return doctorsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDoctorsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return doctorsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/appointmentses")
    @ApiOperation(value = "Gets the appointmentses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Appointments> findAssociatedAppointmentses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated appointmentses");
        return doctorsService.findAssociatedAppointmentses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DoctorsService instance
	 */
	protected void setDoctorsService(DoctorsService service) {
		this.doctorsService = service;
	}

}