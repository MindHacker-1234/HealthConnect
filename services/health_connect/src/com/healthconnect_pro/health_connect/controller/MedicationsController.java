/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.healthconnect_pro.health_connect.Medications;
import com.healthconnect_pro.health_connect.service.MedicationsService;


/**
 * Controller object for domain model class Medications.
 * @see Medications
 */
@RestController("health_connect.MedicationsController")
@Api(value = "MedicationsController", description = "Exposes APIs to work with Medications resource.")
@RequestMapping("/health_connect/Medications")
public class MedicationsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MedicationsController.class);

    @Autowired
	@Qualifier("health_connect.MedicationsService")
	private MedicationsService medicationsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Medications instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Medications createMedications(@RequestBody Medications medicationsInstance) {
		LOGGER.debug("Create Medications with information: {}" , medicationsInstance);

		medicationsInstance = medicationsService.create(medicationsInstance);
		LOGGER.debug("Created Medications with information: {}" , medicationsInstance);

	    return medicationsInstance;
	}

    @ApiOperation(value = "Returns the Medications instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Medications getMedications(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Medications with id: {}" , id);

        Medications foundMedications = medicationsService.getById(id);
        LOGGER.debug("Medications details with id: {}" , foundMedications);

        return foundMedications;
    }

    @ApiOperation(value = "Updates the Medications instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Medications editMedications(@PathVariable("id") Integer id, @RequestBody Medications medicationsInstance) {
        LOGGER.debug("Editing Medications with id: {}" , medicationsInstance.getId());

        medicationsInstance.setId(id);
        medicationsInstance = medicationsService.update(medicationsInstance);
        LOGGER.debug("Medications details with id: {}" , medicationsInstance);

        return medicationsInstance;
    }
    
    @ApiOperation(value = "Partially updates the Medications instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Medications patchMedications(@PathVariable("id") Integer id, @RequestBody @MapTo(Medications.class) Map<String, Object> medicationsInstancePatch) {
        LOGGER.debug("Partially updating Medications with id: {}" , id);

        Medications medicationsInstance = medicationsService.partialUpdate(id, medicationsInstancePatch);
        LOGGER.debug("Medications details after partial update: {}" , medicationsInstance);

        return medicationsInstance;
    }

    @ApiOperation(value = "Deletes the Medications instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMedications(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Medications with id: {}" , id);

        Medications deletedMedications = medicationsService.delete(id);

        return deletedMedications != null;
    }

    /**
     * @deprecated Use {@link #findMedications(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Medications instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Medications> searchMedicationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Medications list by query filter:{}", (Object) queryFilters);
        return medicationsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Medications instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Medications> findMedications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Medications list by filter:", query);
        return medicationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Medications instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Medications> filterMedications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Medications list by filter", query);
        return medicationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMedications(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return medicationsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMedicationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Medications.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> medicationsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Medications instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMedications( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Medications");
		return medicationsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMedicationsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return medicationsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MedicationsService instance
	 */
	protected void setMedicationsService(MedicationsService service) {
		this.medicationsService = service;
	}

}