/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Departments generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`departments`", uniqueConstraints = {
            @UniqueConstraint(name = "`department_name`", columnNames = {"`department_name`", "`department_head`", "`department_description`"})})
public class Departments implements Serializable {

    private Integer id;
    private String departmentName;
    private String departmentHead;
    private String departmentDescription;
    private Integer hospitalId;
    private Hospitals hospitals;

    @Id
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`department_name`", nullable = true, length = 255)
    public String getDepartmentName() {
        return this.departmentName;
    }

    public void setDepartmentName(String departmentName) {
        this.departmentName = departmentName;
    }

    @Column(name = "`department_head`", nullable = true, length = 255)
    public String getDepartmentHead() {
        return this.departmentHead;
    }

    public void setDepartmentHead(String departmentHead) {
        this.departmentHead = departmentHead;
    }

    @Column(name = "`department_description`", nullable = true, length = 255)
    public String getDepartmentDescription() {
        return this.departmentDescription;
    }

    public void setDepartmentDescription(String departmentDescription) {
        this.departmentDescription = departmentDescription;
    }

    @Column(name = "`hospital_id`", nullable = true, scale = 0, precision = 10)
    public Integer getHospitalId() {
        return this.hospitalId;
    }

    public void setHospitalId(Integer hospitalId) {
        this.hospitalId = hospitalId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`hospital_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`departments_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Hospitals getHospitals() {
        return this.hospitals;
    }

    public void setHospitals(Hospitals hospitals) {
        if(hospitals != null) {
            this.hospitalId = hospitals.getId();
        }

        this.hospitals = hospitals;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Departments)) return false;
        final Departments departments = (Departments) o;
        return Objects.equals(getId(), departments.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}