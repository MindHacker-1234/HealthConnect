/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Appointments;
import com.healthconnect_pro.health_connect.Doctors;

/**
 * Service object for domain model class {@link Doctors}.
 */
public interface DoctorsService {

    /**
     * Creates a new Doctors. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Doctors if any.
     *
     * @param doctors Details of the Doctors to be created; value cannot be null.
     * @return The newly created Doctors.
     */
    Doctors create(@Valid Doctors doctors);


	/**
     * Returns Doctors by given id if exists.
     *
     * @param doctorsId The id of the Doctors to get; value cannot be null.
     * @return Doctors associated with the given doctorsId.
	 * @throws EntityNotFoundException If no Doctors is found.
     */
    Doctors getById(Integer doctorsId);

    /**
     * Find and return the Doctors by given id if exists, returns null otherwise.
     *
     * @param doctorsId The id of the Doctors to get; value cannot be null.
     * @return Doctors associated with the given doctorsId.
     */
    Doctors findById(Integer doctorsId);

	/**
     * Find and return the list of Doctors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param doctorsIds The id's of the Doctors to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Doctors associated with the given doctorsIds.
     */
    List<Doctors> findByMultipleIds(List<Integer> doctorsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Doctors. It replaces all fields of the existing Doctors with the given doctors.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Doctors if any.
     *
     * @param doctors The details of the Doctors to be updated; value cannot be null.
     * @return The updated Doctors.
     * @throws EntityNotFoundException if no Doctors is found with given input.
     */
    Doctors update(@Valid Doctors doctors);


    /**
     * Partially updates the details of an existing Doctors. It updates only the
     * fields of the existing Doctors which are passed in the doctorsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Doctors if any.
     *
     * @param doctorsId The id of the Doctors to be deleted; value cannot be null.
     * @param doctorsPatch The partial data of Doctors which is supposed to be updated; value cannot be null.
     * @return The updated Doctors.
     * @throws EntityNotFoundException if no Doctors is found with given input.
     */
    Doctors partialUpdate(Integer doctorsId, Map<String, Object> doctorsPatch);

    /**
     * Deletes an existing Doctors with the given id.
     *
     * @param doctorsId The id of the Doctors to be deleted; value cannot be null.
     * @return The deleted Doctors.
     * @throws EntityNotFoundException if no Doctors found with the given id.
     */
    Doctors delete(Integer doctorsId);

    /**
     * Deletes an existing Doctors with the given object.
     *
     * @param doctors The instance of the Doctors to be deleted; value cannot be null.
     */
    void delete(Doctors doctors);

    /**
     * Find all Doctors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Doctors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Doctors> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Doctors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Doctors.
     *
     * @see Pageable
     * @see Page
     */
    Page<Doctors> findAll(String query, Pageable pageable);

    /**
     * Exports all Doctors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Doctors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Doctors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Doctors.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated appointmentses for given Doctors id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Appointments instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Appointments> findAssociatedAppointmentses(Integer id, Pageable pageable);

}