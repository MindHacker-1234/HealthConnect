/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Symptoms;


/**
 * ServiceImpl object for domain model class Symptoms.
 *
 * @see Symptoms
 */
@Service("health_connect.SymptomsService")
@Validated
@EntityService(entityClass = Symptoms.class, serviceId = "health_connect")
public class SymptomsServiceImpl implements SymptomsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SymptomsServiceImpl.class);


    @Autowired
    @Qualifier("health_connect.SymptomsDao")
    private WMGenericDao<Symptoms, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Symptoms, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Symptoms create(Symptoms symptoms) {
        LOGGER.debug("Creating a new Symptoms with information: {}", symptoms);

        Symptoms symptomsCreated = this.wmGenericDao.create(symptoms);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(symptomsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Symptoms getById(Integer symptomsId) {
        LOGGER.debug("Finding Symptoms by id: {}", symptomsId);
        return this.wmGenericDao.findById(symptomsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Symptoms findById(Integer symptomsId) {
        LOGGER.debug("Finding Symptoms by id: {}", symptomsId);
        try {
            return this.wmGenericDao.findById(symptomsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Symptoms found with id: {}", symptomsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Symptoms> findByMultipleIds(List<Integer> symptomsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Symptoms by ids: {}", symptomsIds);

        return this.wmGenericDao.findByMultipleIds(symptomsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Symptoms update(Symptoms symptoms) {
        LOGGER.debug("Updating Symptoms with information: {}", symptoms);

        this.wmGenericDao.update(symptoms);
        this.wmGenericDao.refresh(symptoms);

        return symptoms;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Symptoms partialUpdate(Integer symptomsId, Map<String, Object>symptomsPatch) {
        LOGGER.debug("Partially Updating the Symptoms with id: {}", symptomsId);

        Symptoms symptoms = getById(symptomsId);

        try {
            ObjectReader symptomsReader = this.objectMapper.reader().forType(Symptoms.class).withValueToUpdate(symptoms);
            symptoms = symptomsReader.readValue(this.objectMapper.writeValueAsString(symptomsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", symptomsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        symptoms = update(symptoms);

        return symptoms;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Symptoms delete(Integer symptomsId) {
        LOGGER.debug("Deleting Symptoms with id: {}", symptomsId);
        Symptoms deleted = this.wmGenericDao.findById(symptomsId);
        if (deleted == null) {
            LOGGER.debug("No Symptoms found with id: {}", symptomsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Symptoms.class.getSimpleName(), symptomsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Symptoms symptoms) {
        LOGGER.debug("Deleting Symptoms with {}", symptoms);
        this.wmGenericDao.delete(symptoms);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Symptoms> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Symptoms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Symptoms> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Symptoms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Symptoms to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Symptoms to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}