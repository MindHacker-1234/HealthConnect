/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Departments;
import com.healthconnect_pro.health_connect.Doctors;
import com.healthconnect_pro.health_connect.Hospitals;


/**
 * ServiceImpl object for domain model class Hospitals.
 *
 * @see Hospitals
 */
@Service("health_connect.HospitalsService")
@Validated
@EntityService(entityClass = Hospitals.class, serviceId = "health_connect")
public class HospitalsServiceImpl implements HospitalsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HospitalsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("health_connect.DoctorsService")
    private DoctorsService doctorsService;

    @Lazy
    @Autowired
    @Qualifier("health_connect.DepartmentsService")
    private DepartmentsService departmentsService;

    @Autowired
    @Qualifier("health_connect.HospitalsDao")
    private WMGenericDao<Hospitals, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Hospitals, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Hospitals create(Hospitals hospitals) {
        LOGGER.debug("Creating a new Hospitals with information: {}", hospitals);

        Hospitals hospitalsCreated = this.wmGenericDao.create(hospitals);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(hospitalsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Hospitals getById(Integer hospitalsId) {
        LOGGER.debug("Finding Hospitals by id: {}", hospitalsId);
        return this.wmGenericDao.findById(hospitalsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Hospitals findById(Integer hospitalsId) {
        LOGGER.debug("Finding Hospitals by id: {}", hospitalsId);
        try {
            return this.wmGenericDao.findById(hospitalsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Hospitals found with id: {}", hospitalsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Hospitals> findByMultipleIds(List<Integer> hospitalsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Hospitals by ids: {}", hospitalsIds);

        return this.wmGenericDao.findByMultipleIds(hospitalsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Hospitals update(Hospitals hospitals) {
        LOGGER.debug("Updating Hospitals with information: {}", hospitals);

        this.wmGenericDao.update(hospitals);
        this.wmGenericDao.refresh(hospitals);

        return hospitals;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Hospitals partialUpdate(Integer hospitalsId, Map<String, Object>hospitalsPatch) {
        LOGGER.debug("Partially Updating the Hospitals with id: {}", hospitalsId);

        Hospitals hospitals = getById(hospitalsId);

        try {
            ObjectReader hospitalsReader = this.objectMapper.reader().forType(Hospitals.class).withValueToUpdate(hospitals);
            hospitals = hospitalsReader.readValue(this.objectMapper.writeValueAsString(hospitalsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", hospitalsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        hospitals = update(hospitals);

        return hospitals;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Hospitals delete(Integer hospitalsId) {
        LOGGER.debug("Deleting Hospitals with id: {}", hospitalsId);
        Hospitals deleted = this.wmGenericDao.findById(hospitalsId);
        if (deleted == null) {
            LOGGER.debug("No Hospitals found with id: {}", hospitalsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Hospitals.class.getSimpleName(), hospitalsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Hospitals hospitals) {
        LOGGER.debug("Deleting Hospitals with {}", hospitals);
        this.wmGenericDao.delete(hospitals);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Hospitals> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Hospitals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Hospitals> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Hospitals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Hospitals to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Hospitals to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Departments> findAssociatedDepartmentses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("hospitals.id = '" + id + "'");

        return departmentsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Doctors> findAssociatedDoctorses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated doctorses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("hospitals.id = '" + id + "'");

        return doctorsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DoctorsService instance
     */
    protected void setDoctorsService(DoctorsService service) {
        this.doctorsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DepartmentsService instance
     */
    protected void setDepartmentsService(DepartmentsService service) {
        this.departmentsService = service;
    }

}