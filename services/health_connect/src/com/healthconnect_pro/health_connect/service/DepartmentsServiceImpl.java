/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Departments;
import com.healthconnect_pro.health_connect.Doctors;


/**
 * ServiceImpl object for domain model class Departments.
 *
 * @see Departments
 */
@Service("health_connect.DepartmentsService")
@Validated
@EntityService(entityClass = Departments.class, serviceId = "health_connect")
public class DepartmentsServiceImpl implements DepartmentsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("health_connect.DoctorsService")
    private DoctorsService doctorsService;

    @Autowired
    @Qualifier("health_connect.DepartmentsDao")
    private WMGenericDao<Departments, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Departments, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Departments create(Departments departments) {
        LOGGER.debug("Creating a new Departments with information: {}", departments);

        Departments departmentsCreated = this.wmGenericDao.create(departments);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(departmentsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Departments getById(Integer departmentsId) {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        return this.wmGenericDao.findById(departmentsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Departments findById(Integer departmentsId) {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        try {
            return this.wmGenericDao.findById(departmentsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Departments found with id: {}", departmentsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Departments> findByMultipleIds(List<Integer> departmentsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Departments by ids: {}", departmentsIds);

        return this.wmGenericDao.findByMultipleIds(departmentsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Departments getByDepartmentNameAndDepartmentHeadAndDepartmentDescription(String departmentName, String departmentHead, String departmentDescription) {
        Map<String, Object> departmentNameAndDepartmentHeadAndDepartmentDescriptionMap = new HashMap<>();
        departmentNameAndDepartmentHeadAndDepartmentDescriptionMap.put("departmentName", departmentName);
        departmentNameAndDepartmentHeadAndDepartmentDescriptionMap.put("departmentHead", departmentHead);
        departmentNameAndDepartmentHeadAndDepartmentDescriptionMap.put("departmentDescription", departmentDescription);

        LOGGER.debug("Finding Departments by unique keys: {}", departmentNameAndDepartmentHeadAndDepartmentDescriptionMap);
        return this.wmGenericDao.findByUniqueKey(departmentNameAndDepartmentHeadAndDepartmentDescriptionMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Departments update(Departments departments) {
        LOGGER.debug("Updating Departments with information: {}", departments);

        this.wmGenericDao.update(departments);
        this.wmGenericDao.refresh(departments);

        return departments;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Departments partialUpdate(Integer departmentsId, Map<String, Object>departmentsPatch) {
        LOGGER.debug("Partially Updating the Departments with id: {}", departmentsId);

        Departments departments = getById(departmentsId);

        try {
            ObjectReader departmentsReader = this.objectMapper.reader().forType(Departments.class).withValueToUpdate(departments);
            departments = departmentsReader.readValue(this.objectMapper.writeValueAsString(departmentsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", departmentsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        departments = update(departments);

        return departments;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Departments delete(Integer departmentsId) {
        LOGGER.debug("Deleting Departments with id: {}", departmentsId);
        Departments deleted = this.wmGenericDao.findById(departmentsId);
        if (deleted == null) {
            LOGGER.debug("No Departments found with id: {}", departmentsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Departments.class.getSimpleName(), departmentsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Departments departments) {
        LOGGER.debug("Deleting Departments with {}", departments);
        this.wmGenericDao.delete(departments);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Departments> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Departments> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Departments to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Departments to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Doctors> findAssociatedDoctorses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated doctorses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departments.id = '" + id + "'");

        return doctorsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DoctorsService instance
     */
    protected void setDoctorsService(DoctorsService service) {
        this.doctorsService = service;
    }

}