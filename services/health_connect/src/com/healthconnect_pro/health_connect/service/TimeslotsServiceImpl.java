/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Appointments;
import com.healthconnect_pro.health_connect.Timeslots;


/**
 * ServiceImpl object for domain model class Timeslots.
 *
 * @see Timeslots
 */
@Service("health_connect.TimeslotsService")
@Validated
@EntityService(entityClass = Timeslots.class, serviceId = "health_connect")
public class TimeslotsServiceImpl implements TimeslotsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeslotsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("health_connect.AppointmentsService")
    private AppointmentsService appointmentsService;

    @Autowired
    @Qualifier("health_connect.TimeslotsDao")
    private WMGenericDao<Timeslots, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Timeslots, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Timeslots create(Timeslots timeslots) {
        LOGGER.debug("Creating a new Timeslots with information: {}", timeslots);

        Timeslots timeslotsCreated = this.wmGenericDao.create(timeslots);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(timeslotsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Timeslots getById(Integer timeslotsId) {
        LOGGER.debug("Finding Timeslots by id: {}", timeslotsId);
        return this.wmGenericDao.findById(timeslotsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Timeslots findById(Integer timeslotsId) {
        LOGGER.debug("Finding Timeslots by id: {}", timeslotsId);
        try {
            return this.wmGenericDao.findById(timeslotsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Timeslots found with id: {}", timeslotsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Timeslots> findByMultipleIds(List<Integer> timeslotsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Timeslots by ids: {}", timeslotsIds);

        return this.wmGenericDao.findByMultipleIds(timeslotsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Timeslots update(Timeslots timeslots) {
        LOGGER.debug("Updating Timeslots with information: {}", timeslots);

        this.wmGenericDao.update(timeslots);
        this.wmGenericDao.refresh(timeslots);

        return timeslots;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Timeslots partialUpdate(Integer timeslotsId, Map<String, Object>timeslotsPatch) {
        LOGGER.debug("Partially Updating the Timeslots with id: {}", timeslotsId);

        Timeslots timeslots = getById(timeslotsId);

        try {
            ObjectReader timeslotsReader = this.objectMapper.reader().forType(Timeslots.class).withValueToUpdate(timeslots);
            timeslots = timeslotsReader.readValue(this.objectMapper.writeValueAsString(timeslotsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", timeslotsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        timeslots = update(timeslots);

        return timeslots;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Timeslots delete(Integer timeslotsId) {
        LOGGER.debug("Deleting Timeslots with id: {}", timeslotsId);
        Timeslots deleted = this.wmGenericDao.findById(timeslotsId);
        if (deleted == null) {
            LOGGER.debug("No Timeslots found with id: {}", timeslotsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Timeslots.class.getSimpleName(), timeslotsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Timeslots timeslots) {
        LOGGER.debug("Deleting Timeslots with {}", timeslots);
        this.wmGenericDao.delete(timeslots);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Timeslots> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Timeslots");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Timeslots> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Timeslots");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Timeslots to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Timeslots to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Appointments> findAssociatedAppointmentses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated appointmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("timeslots.id = '" + id + "'");

        return appointmentsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AppointmentsService instance
     */
    protected void setAppointmentsService(AppointmentsService service) {
        this.appointmentsService = service;
    }

}