/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Medications;

/**
 * Service object for domain model class {@link Medications}.
 */
public interface MedicationsService {

    /**
     * Creates a new Medications. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Medications if any.
     *
     * @param medicationsInstance Details of the Medications to be created; value cannot be null.
     * @return The newly created Medications.
     */
    Medications create(@Valid Medications medicationsInstance);


	/**
     * Returns Medications by given id if exists.
     *
     * @param medicationsId The id of the Medications to get; value cannot be null.
     * @return Medications associated with the given medicationsId.
	 * @throws EntityNotFoundException If no Medications is found.
     */
    Medications getById(Integer medicationsId);

    /**
     * Find and return the Medications by given id if exists, returns null otherwise.
     *
     * @param medicationsId The id of the Medications to get; value cannot be null.
     * @return Medications associated with the given medicationsId.
     */
    Medications findById(Integer medicationsId);

	/**
     * Find and return the list of Medications by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param medicationsIds The id's of the Medications to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Medications associated with the given medicationsIds.
     */
    List<Medications> findByMultipleIds(List<Integer> medicationsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Medications. It replaces all fields of the existing Medications with the given medicationsInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Medications if any.
     *
     * @param medicationsInstance The details of the Medications to be updated; value cannot be null.
     * @return The updated Medications.
     * @throws EntityNotFoundException if no Medications is found with given input.
     */
    Medications update(@Valid Medications medicationsInstance);


    /**
     * Partially updates the details of an existing Medications. It updates only the
     * fields of the existing Medications which are passed in the medicationsInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Medications if any.
     *
     * @param medicationsId The id of the Medications to be deleted; value cannot be null.
     * @param medicationsInstancePatch The partial data of Medications which is supposed to be updated; value cannot be null.
     * @return The updated Medications.
     * @throws EntityNotFoundException if no Medications is found with given input.
     */
    Medications partialUpdate(Integer medicationsId, Map<String, Object> medicationsInstancePatch);

    /**
     * Deletes an existing Medications with the given id.
     *
     * @param medicationsId The id of the Medications to be deleted; value cannot be null.
     * @return The deleted Medications.
     * @throws EntityNotFoundException if no Medications found with the given id.
     */
    Medications delete(Integer medicationsId);

    /**
     * Deletes an existing Medications with the given object.
     *
     * @param medicationsInstance The instance of the Medications to be deleted; value cannot be null.
     */
    void delete(Medications medicationsInstance);

    /**
     * Find all Medications matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Medications.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Medications> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Medications matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Medications.
     *
     * @see Pageable
     * @see Page
     */
    Page<Medications> findAll(String query, Pageable pageable);

    /**
     * Exports all Medications matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Medications matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Medications in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Medications.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}