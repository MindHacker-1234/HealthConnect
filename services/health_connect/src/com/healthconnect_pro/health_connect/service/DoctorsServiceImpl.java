/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Appointments;
import com.healthconnect_pro.health_connect.Doctors;


/**
 * ServiceImpl object for domain model class Doctors.
 *
 * @see Doctors
 */
@Service("health_connect.DoctorsService")
@Validated
@EntityService(entityClass = Doctors.class, serviceId = "health_connect")
public class DoctorsServiceImpl implements DoctorsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoctorsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("health_connect.AppointmentsService")
    private AppointmentsService appointmentsService;

    @Autowired
    @Qualifier("health_connect.DoctorsDao")
    private WMGenericDao<Doctors, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Doctors, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Doctors create(Doctors doctors) {
        LOGGER.debug("Creating a new Doctors with information: {}", doctors);

        Doctors doctorsCreated = this.wmGenericDao.create(doctors);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(doctorsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Doctors getById(Integer doctorsId) {
        LOGGER.debug("Finding Doctors by id: {}", doctorsId);
        return this.wmGenericDao.findById(doctorsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Doctors findById(Integer doctorsId) {
        LOGGER.debug("Finding Doctors by id: {}", doctorsId);
        try {
            return this.wmGenericDao.findById(doctorsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Doctors found with id: {}", doctorsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Doctors> findByMultipleIds(List<Integer> doctorsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Doctors by ids: {}", doctorsIds);

        return this.wmGenericDao.findByMultipleIds(doctorsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Doctors update(Doctors doctors) {
        LOGGER.debug("Updating Doctors with information: {}", doctors);

        this.wmGenericDao.update(doctors);
        this.wmGenericDao.refresh(doctors);

        return doctors;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Doctors partialUpdate(Integer doctorsId, Map<String, Object>doctorsPatch) {
        LOGGER.debug("Partially Updating the Doctors with id: {}", doctorsId);

        Doctors doctors = getById(doctorsId);

        try {
            ObjectReader doctorsReader = this.objectMapper.reader().forType(Doctors.class).withValueToUpdate(doctors);
            doctors = doctorsReader.readValue(this.objectMapper.writeValueAsString(doctorsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", doctorsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        doctors = update(doctors);

        return doctors;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Doctors delete(Integer doctorsId) {
        LOGGER.debug("Deleting Doctors with id: {}", doctorsId);
        Doctors deleted = this.wmGenericDao.findById(doctorsId);
        if (deleted == null) {
            LOGGER.debug("No Doctors found with id: {}", doctorsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Doctors.class.getSimpleName(), doctorsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Doctors doctors) {
        LOGGER.debug("Deleting Doctors with {}", doctors);
        this.wmGenericDao.delete(doctors);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Doctors> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Doctors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Doctors> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Doctors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Doctors to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Doctors to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Appointments> findAssociatedAppointmentses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated appointmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("doctors.id = '" + id + "'");

        return appointmentsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AppointmentsService instance
     */
    protected void setAppointmentsService(AppointmentsService service) {
        this.appointmentsService = service;
    }

}