/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Appointments;
import com.healthconnect_pro.health_connect.Patients;


/**
 * ServiceImpl object for domain model class Patients.
 *
 * @see Patients
 */
@Service("health_connect.PatientsService")
@Validated
@EntityService(entityClass = Patients.class, serviceId = "health_connect")
public class PatientsServiceImpl implements PatientsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PatientsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("health_connect.AppointmentsService")
    private AppointmentsService appointmentsService;

    @Autowired
    @Qualifier("health_connect.PatientsDao")
    private WMGenericDao<Patients, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Patients, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Patients create(Patients patients) {
        LOGGER.debug("Creating a new Patients with information: {}", patients);

        Patients patientsCreated = this.wmGenericDao.create(patients);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(patientsCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Patients getById(Integer patientsId) {
        LOGGER.debug("Finding Patients by id: {}", patientsId);
        return this.wmGenericDao.findById(patientsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Patients findById(Integer patientsId) {
        LOGGER.debug("Finding Patients by id: {}", patientsId);
        try {
            return this.wmGenericDao.findById(patientsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Patients found with id: {}", patientsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Patients> findByMultipleIds(List<Integer> patientsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Patients by ids: {}", patientsIds);

        return this.wmGenericDao.findByMultipleIds(patientsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Patients getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding Patients by unique keys: {}", emailMap);
        return this.wmGenericDao.findByUniqueKey(emailMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Patients update(Patients patients) {
        LOGGER.debug("Updating Patients with information: {}", patients);

        this.wmGenericDao.update(patients);
        this.wmGenericDao.refresh(patients);

        return patients;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Patients partialUpdate(Integer patientsId, Map<String, Object>patientsPatch) {
        LOGGER.debug("Partially Updating the Patients with id: {}", patientsId);

        Patients patients = getById(patientsId);

        try {
            ObjectReader patientsReader = this.objectMapper.reader().forType(Patients.class).withValueToUpdate(patients);
            patients = patientsReader.readValue(this.objectMapper.writeValueAsString(patientsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", patientsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        patients = update(patients);

        return patients;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Patients delete(Integer patientsId) {
        LOGGER.debug("Deleting Patients with id: {}", patientsId);
        Patients deleted = this.wmGenericDao.findById(patientsId);
        if (deleted == null) {
            LOGGER.debug("No Patients found with id: {}", patientsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Patients.class.getSimpleName(), patientsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Patients patients) {
        LOGGER.debug("Deleting Patients with {}", patients);
        this.wmGenericDao.delete(patients);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Patients> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Patients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Patients> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Patients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Patients to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Patients to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Appointments> findAssociatedAppointmentses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated appointmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("patients.id = '" + id + "'");

        return appointmentsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AppointmentsService instance
     */
    protected void setAppointmentsService(AppointmentsService service) {
        this.appointmentsService = service;
    }

}