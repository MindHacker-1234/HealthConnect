/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.healthconnect_pro.health_connect.Medications;


/**
 * ServiceImpl object for domain model class Medications.
 *
 * @see Medications
 */
@Service("health_connect.MedicationsService")
@Validated
@EntityService(entityClass = Medications.class, serviceId = "health_connect")
public class MedicationsServiceImpl implements MedicationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MedicationsServiceImpl.class);


    @Autowired
    @Qualifier("health_connect.MedicationsDao")
    private WMGenericDao<Medications, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Medications, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Medications create(Medications medicationsInstance) {
        LOGGER.debug("Creating a new Medications with information: {}", medicationsInstance);

        Medications medicationsInstanceCreated = this.wmGenericDao.create(medicationsInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(medicationsInstanceCreated);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Medications getById(Integer medicationsId) {
        LOGGER.debug("Finding Medications by id: {}", medicationsId);
        return this.wmGenericDao.findById(medicationsId);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Medications findById(Integer medicationsId) {
        LOGGER.debug("Finding Medications by id: {}", medicationsId);
        try {
            return this.wmGenericDao.findById(medicationsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Medications found with id: {}", medicationsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public List<Medications> findByMultipleIds(List<Integer> medicationsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Medications by ids: {}", medicationsIds);

        return this.wmGenericDao.findByMultipleIds(medicationsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "health_connectTransactionManager")
    @Override
    public Medications update(Medications medicationsInstance) {
        LOGGER.debug("Updating Medications with information: {}", medicationsInstance);

        this.wmGenericDao.update(medicationsInstance);
        this.wmGenericDao.refresh(medicationsInstance);

        return medicationsInstance;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Medications partialUpdate(Integer medicationsId, Map<String, Object>medicationsInstancePatch) {
        LOGGER.debug("Partially Updating the Medications with id: {}", medicationsId);

        Medications medicationsInstance = getById(medicationsId);

        try {
            ObjectReader medicationsInstanceReader = this.objectMapper.reader().forType(Medications.class).withValueToUpdate(medicationsInstance);
            medicationsInstance = medicationsInstanceReader.readValue(this.objectMapper.writeValueAsString(medicationsInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", medicationsInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        medicationsInstance = update(medicationsInstance);

        return medicationsInstance;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public Medications delete(Integer medicationsId) {
        LOGGER.debug("Deleting Medications with id: {}", medicationsId);
        Medications deleted = this.wmGenericDao.findById(medicationsId);
        if (deleted == null) {
            LOGGER.debug("No Medications found with id: {}", medicationsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Medications.class.getSimpleName(), medicationsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "health_connectTransactionManager")
    @Override
    public void delete(Medications medicationsInstance) {
        LOGGER.debug("Deleting Medications with {}", medicationsInstance);
        this.wmGenericDao.delete(medicationsInstance);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Medications> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Medications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Medications> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Medications");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service health_connect for table Medications to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service health_connect for table Medications to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "health_connectTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}