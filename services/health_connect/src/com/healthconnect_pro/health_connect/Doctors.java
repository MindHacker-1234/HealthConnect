/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.healthconnect_pro.health_connect;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Doctors generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`doctors`")
public class Doctors implements Serializable {

    private Integer id;
    private String picture;
    private String fullName;
    private String specialization;
    private Integer hospitalId;
    private Integer departmentId;
    private String daysAvailable;
    private Date doctorStartDate;
    private Date endDate;
    private Hospitals hospitals;
    private Departments departments;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`picture`", nullable = true, length = 255)
    public String getPicture() {
        return this.picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    @Column(name = "`full_name`", nullable = true, length = 255)
    public String getFullName() {
        return this.fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "`specialization`", nullable = true, length = 255)
    public String getSpecialization() {
        return this.specialization;
    }

    public void setSpecialization(String specialization) {
        this.specialization = specialization;
    }

    @Column(name = "`hospital_id`", nullable = true, scale = 0, precision = 10)
    public Integer getHospitalId() {
        return this.hospitalId;
    }

    public void setHospitalId(Integer hospitalId) {
        this.hospitalId = hospitalId;
    }

    @Column(name = "`department_id`", nullable = true, scale = 0, precision = 10)
    public Integer getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(Integer departmentId) {
        this.departmentId = departmentId;
    }

    @Column(name = "`days_available`", nullable = true, length = 255)
    public String getDaysAvailable() {
        return this.daysAvailable;
    }

    public void setDaysAvailable(String daysAvailable) {
        this.daysAvailable = daysAvailable;
    }

    @Column(name = "`doctor_start_date`", nullable = true)
    public Date getDoctorStartDate() {
        return this.doctorStartDate;
    }

    public void setDoctorStartDate(Date doctorStartDate) {
        this.doctorStartDate = doctorStartDate;
    }

    @Column(name = "`end_date`", nullable = true)
    public Date getEndDate() {
        return this.endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`hospital_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`doctors_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Hospitals getHospitals() {
        return this.hospitals;
    }

    public void setHospitals(Hospitals hospitals) {
        if(hospitals != null) {
            this.hospitalId = hospitals.getId();
        }

        this.hospitals = hospitals;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`department_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`doctors_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Departments getDepartments() {
        return this.departments;
    }

    public void setDepartments(Departments departments) {
        if(departments != null) {
            this.departmentId = departments.getId();
        }

        this.departments = departments;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Doctors)) return false;
        final Doctors doctors = (Doctors) o;
        return Objects.equals(getId(), doctors.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}